# Read the CSV file
data <- read.csv("SPAM text message 20170820 - Data.csv", stringsAsFactors = FALSE)
# Preprocess the text data
corpus <- Corpus(VectorSource(data$Message))
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, removeWords, stopwords("english"))
corpus <- tm_map(corpus, stemDocument)
dtm <- DocumentTermMatrix(corpus)
# Convert the dtm to a matrix
dtm_matrix <- as.matrix(dtm)
# Train/test split
set.seed(123)
train_index <- createDataPartition(data$Category, p = 0.7, list = FALSE)
train_data <- data[train_index, ]
test_data <- data[-train_index, ]
# Feature engineering - extracting n-grams
ngram_tokens <- tokens(data$Message, ngrams = 2:3)  # Tokenize with n-grams
ngram_dfm <- dfm(ngram_tokens)                        # Create dfm from tokens
# Train a Random Forest model
train_data$Category <- factor(train_data$Category, ordered = TRUE)
train_data$Category <- as.numeric(train_data$Category)
rf_model <- randomForest(Category ~ ., data = train_data)
# Hyper parameter tuning for SVM
#une_grid <- expand.grid(C = c(0.1, 1, 10), gamma = c(0.01, 0.1, 1))
#svm_tuned <- train(x = dtm_matrix[train_index, ],
#                 y = train_data$Category,
#                   method = "svmLinear",
#                   trControl = trainControl(method = "cv"),
#                   preProcess = c("scale", "center"),
#                   tuneGrid = tune_grid,
#                   class = TRUE)
# Model stacking
models <- list(rf = rf_model, svm = svm_tuned)
# Load necessary libraries
library(caret)
library(tm)
library(quanteda)
library(randomForest)
library(DMwR2)
library(caretEnsemble)
# Read the CSV file
data <- read.csv("SPAM text message 20170820 - Data.csv", stringsAsFactors = FALSE)
# Preprocess the text data
corpus <- Corpus(VectorSource(data$Message))
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, removeWords, stopwords("english"))
corpus <- tm_map(corpus, stemDocument)
dtm <- DocumentTermMatrix(corpus)
# Convert the dtm to a matrix
dtm_matrix <- as.matrix(dtm)
# Train/test split
set.seed(123)
train_index <- createDataPartition(data$Category, p = 0.7, list = FALSE)
train_data <- data[train_index, ]
test_data <- data[-train_index, ]
# Feature engineering - extracting n-grams
ngram_tokens <- tokens(data$Message, ngrams = 2:3)  # Tokenize with n-grams
ngram_dfm <- dfm(ngram_tokens)                        # Create dfm from tokens
# Train a Random Forest model
train_data$Category <- factor(train_data$Category, ordered = TRUE)
train_data$Category <- as.numeric(train_data$Category)
rf_model <- randomForest(Category ~ ., data = train_data)
# Hyper parameter tuning for SVM
#une_grid <- expand.grid(C = c(0.1, 1, 10), gamma = c(0.01, 0.1, 1))
#svm_tuned <- train(x = dtm_matrix[train_index, ],
#                 y = train_data$Category,
#                   method = "svmLinear",
#                   trControl = trainControl(method = "cv"),
#                   preProcess = c("scale", "center"),
#                   tuneGrid = tune_grid,
#                   class = TRUE)
model <- train(
x = dtm_matrix[train_index, ],
y = train_data$Category,
method = "svmLinear",
trControl = trainControl(method = "cv"),
preProcess = c("scale", "center")
)
# Get training accuracy
training_accuracy <- svm_tuned$results$Accuracy
# Get training accuracy
training_accuracy <- model$results$Accuracy
print(training_accuracy)
# Get training accuracy
training_accuracy <- model$results$Accuracy
print(training_accuracy)
# Custom message
custom_message <- "Sorry, I'll call later"
# Preprocess the custom message
custom_message <- tolower(custom_message) # Convert to lowercase
custom_message <- gsub('[[:punct:]]', '', custom_message) # Remove punctuation
custom_message <- removeNumbers(custom_message) # Remove numbers
custom_message <- removeWords(custom_message, stopwords("english")) # Remove stopwords
custom_message <- stemDocument(custom_message) # Stemming
# Create a document-term matrix for the custom message
custom_corpus <- Corpus(VectorSource(custom_message))
custom_corpus <- tm_map(custom_corpus, content_transformer(tolower))
custom_corpus <- tm_map(custom_corpus, removePunctuation)
custom_dtm <- DocumentTermMatrix(custom_corpus, control = list(dictionary = Terms(dtm)))
# Convert the dtm to a matrix
custom_dtm_matrix <- as.matrix(custom_dtm)
# Ensure the custom message has the same terms as the training data
custom_dtm_matrix <- cbind(custom_dtm_matrix, matrix(0, nrow = nrow(custom_dtm_matrix), ncol = ncol(dtm_matrix) - ncol(custom_dtm_matrix)))
# Make predictions for the custom message using stacked model
custom_prediction <- predict(stack_model, newdata = custom_dtm_matrix)
# Custom message
custom_message <- "Sorry, I'll call later"
# Preprocess the custom message
custom_message <- tolower(custom_message) # Convert to lowercase
custom_message <- gsub('[[:punct:]]', '', custom_message) # Remove punctuation
custom_message <- removeNumbers(custom_message) # Remove numbers
custom_message <- removeWords(custom_message, stopwords("english")) # Remove stopwords
custom_message <- stemDocument(custom_message) # Stemming
# Create a document-term matrix for the custom message
custom_corpus <- Corpus(VectorSource(custom_message))
custom_corpus <- tm_map(custom_corpus, content_transformer(tolower))
custom_corpus <- tm_map(custom_corpus, removePunctuation)
custom_dtm <- DocumentTermMatrix(custom_corpus, control = list(dictionary = Terms(dtm)))
# Convert the dtm to a matrix
custom_dtm_matrix <- as.matrix(custom_dtm)
# Ensure the custom message has the same terms as the training data
custom_dtm_matrix <- cbind(custom_dtm_matrix, matrix(0, nrow = nrow(custom_dtm_matrix), ncol = ncol(dtm_matrix) - ncol(custom_dtm_matrix)))
# Make predictions for the custom message using stacked model
custom_prediction <- predict(model, newdata = custom_dtm_matrix)
# Print the prediction
print(custom_prediction)
train_data$Category <- factor(train_data$Category, ordered = TRUE)
train_data$Category <- as.numeric(train_data$Category)
rf_model <- randomForest(Category ~ ., data = train_data)
varImpPlot(rf_model)
train_data$Category <- factor(train_data$Category, ordered = TRUE)
train_data$Category <- as.numeric(train_data$Category)
rf_model <- randomForest(Category ~ ., data = train_data)
varImpPlot(rf_model)
train_data$Category <- factor(train_data$Category, ordered = TRUE)
train_data$Category <- as.numeric(train_data$Category)
rf_model <- randomForest(Category ~ ., data = train_data)
varImpPlot(rf_model)
# Train a Random Forest model
train_data$Category <- factor(train_data$Category, ordered = TRUE)
train_data$Category <- as.numeric(train_data$Category)
rf_model <- randomForest(Category ~ ., data = train_data)
varImpPlot(rf_model)
# Train a Random Forest model
train_data$Category <- factor(train_data$Category, ordered = TRUE)
train_data$Category <- as.numeric(train_data$Category)
rf_model <- randomForest(Category ~ ., data = train_data)
varImpPlot(rf_model)
# Train a Random Forest model
train_data$Category <- factor(train_data$Category, ordered = TRUE)
train_data$Category <- as.numeric(train_data$Category)
rf_model <- randomForest(Category ~ ., data = train_data)
varImpPlot(rf_model)
# Train a Random Forest model
train_data$Category <- factor(train_data$Category, ordered = TRUE)
train_data$Category <- as.numeric(train_data$Category)
rf_model <- randomForest(Category ~ ., data = train_data)
varImpPlot(rf_model)
# Train a Random Forest model
train_data$Category <- factor(train_data$Category, ordered = TRUE)
train_data$Category <- as.numeric(train_data$Category)
rf_model <- randomForest(Category ~ ., data = train_data)
varImpPlot(rf_model)
# Train a Random Forest model
train_data$Category <- factor(train_data$Category, ordered = TRUE)
train_data$Category <- as.numeric(train_data$Category)
rf_model <- randomForest(Category ~ ., data = train_data)
varImpPlot(rf_model)
confusionMatrix(table(test_pred, test_data$Category))
# Hyperparameter tuning for SVM
tune_grid <- expand.grid(C = c(0.1, 1, 10), gamma = c(0.01, 0.1, 1))
svm_tuned <- train(x = dtm_matrix[train_index, ],
y = train_data$Category,
method = "svmLinear",
trControl = trainControl(method = "cv"),
preProcess = c("scale", "center"),
tuneGrid = tune_grid)
q()
#Accuracy
svm_accuracy <- svm_model$results$Accuracy
#Accuracy
svm_accuracy <- svm_model$results$Accuracy
#Accuracy
svm_accuracy <- svm_model$results$Accuracy
#Accuracy
svm_accuracy <- svm_model$results$Accuracy
#Accuracy
svm_accuracy <- svm_model$results$Accuracy
#Accuracy
svm_accuracy <- svm_model$results$Accuracy
#Accuracy
svm_accuracy <- svm_model$results$Accuracy
#Accuracy
svm_accuracy <- svm_model$results$Accuracy
svm_grid <- expand.grid(C = seq(0.1, 1, by = 0.1),
kernel = c("linear", "radial", "sigmoid"),
gamma = c(0.1, 0.01, 0.001))
plot(svm_grid)
# Train
svm_model <- train(
x = dtm_matrix[train_index, ],
y = train_data$Category,
method = "svmLinear",
trControl = trainControl(method = "cv"),
preProcess = c("scale", "center")
)
library(pROC)
library(caret)
library(tm)
library(randomForest)
library(e1071)
library(ggplot2)
# Read the CSV file
data <- read.csv("SPAM text message 20170820 - Data.csv", stringsAsFactors = FALSE)
# Preprocess the text data
corpus <- Corpus(VectorSource(data$Message))
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removePunctuation)
dtm <- DocumentTermMatrix(corpus)
# Convert the dtm to a matrix
dtm_matrix <- as.matrix(dtm)
# Train/test split
set.seed(123)
train_index <- createDataPartition(data$Category, p = 0.7, list = FALSE)
train_data <- data[train_index, ]
test_data <- data[-train_index, ]
# Train
svm_model <- train(
x = dtm_matrix[train_index, ],
y = train_data$Category,
method = "svmLinear",
trControl = trainControl(method = "cv"),
preProcess = c("scale", "center")
)
#Accuracy
svm_accuracy <- svm_model$results$Accuracy
print(paste("SVM Model Accuracy:", svm_accuracy))
str(test_data)
str(svm_model)
# Plotting
resample_results <- svm_model$resample
plot_data <- data.frame(
Fold = factor(resample_results$Resample, levels = unique(resample_results$Resample)),
Accuracy = resample_results$Accuracy,
Kappa = resample_results$Kappa
)
ggplot(plot_data, aes(x = Fold)) +
geom_point(aes(y = Accuracy, color = "Accuracy"), size = 3) +
geom_line(aes(y = Accuracy, color = "Accuracy", group = 1), size = 1) +
scale_color_manual(values = c("Accuracy" = "blue")) +
labs(title = "Performance across Folds",
x = "Fold",
y = "Value") +
theme_minimal()
ggplot(data, aes(x = Category, y = Message)) +
geom_point() +
labs(x = "Feature 1", y = "Feature 2") +
theme_minimal()
pie(table(data$Category),
labels = c("Ham", "Spam"),
col = c("skyblue", "salmon"),
main = "Distribution of Ham and Spam Messages")
# Load the trained model
load("svm_model.RData")
# Load the trained model
load("svm_model.RData")
# Define the function to preprocess the message
preprocess_message <- function(message) {
corpus <- Corpus(VectorSource(message))
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removePunctuation)
dtm <- DocumentTermMatrix(corpus, control = list(dictionary = Terms(dtm))))
# Define the function to preprocess the message
preprocess_message <- function(message) {
corpus <- Corpus(VectorSource(message))
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removePunctuation)
dtm <- DocumentTermMatrix(corpus, control = list(dictionary = Terms(dtm))))
# Define the function to preprocess the message
preprocess_message <- function(message) {
corpus <- Corpus(VectorSource(message))
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removePunctuation)
dtm <- DocumentTermMatrix(corpus, control = list(dictionary = Terms(dtm)))
dtm_matrix <- as.matrix(dtm)
return(dtm_matrix)
}
# Test the model on custom message
custom_message <- c("Congratulations! You've won a free vacation. Claim your prize now.")
custom_dtm <- preprocess_message(custom_message)
# Define the SVM model
svm_model <- your_svm_model
# Load required libraries
library(tm)
# Define the function to preprocess the message
preprocess_message <- function(message) {
corpus <- Corpus(VectorSource(message))
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removePunctuation)
dtm <- DocumentTermMatrix(corpus, control = list(dictionary = Terms(dtm))))
# Load required libraries
library(tm)
# Define the function to preprocess the message
preprocess_message <- function(message) {
corpus <- Corpus(VectorSource(message))
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removePunctuation)
dtm <- DocumentTermMatrix(corpus, control = list(dictionary = Terms(dtm))))
# Define the function to preprocess the message
preprocess_message <- function(message) {
corpus <- Corpus(VectorSource(message))
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removePunctuation)
dtm <- DocumentTermMatrix(corpus, control = list(dictionary = Terms(dtm)))
dtm_matrix <- as.matrix(dtm)
return(dtm_matrix)
}
# Function to convert numeric prediction to label
get_label <- function(prediction) {
ifelse(prediction == "spam", "spam", "ham")
}
# Test the model on custom message
custom_message <- c("Congratulations! You've won a free vacation. Claim your prize now.")
custom_dtm <- preprocess_message(custom_message)
# Define the SVM model
svm_model <- your_svm_model
# Define the function to preprocess the message
preprocess_message <- function(message) {
corpus <- Corpus(VectorSource(message))
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removePunctuation)
dtm <- DocumentTermMatrix(corpus, control = list(dictionary = Terms(dtm)))
dtm_matrix <- as.matrix(dtm)
return(dtm_matrix)
}
# Function to convert numeric prediction to label
get_label <- function(prediction) {
ifelse(prediction == "spam", "spam", "ham")
}
# Test the model on custom message
custom_message <- c("Congratulations! You've won a free vacation. Claim your prize now.")
custom_dtm <- preprocess_message(custom_message)
# Define the SVM model
svm_model <- svm_model
# Predict the category for custom message
prediction <- predict(svm_model, newdata = custom_dtm)
# Convert prediction to label
predicted_label <- get_label(prediction)
# Output the prediction
print(paste("Predicted category for custom message:", predicted_label))
# Define the function to preprocess the message
preprocess_message <- function(message) {
corpus <- Corpus(VectorSource(message))
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removePunctuation)
dtm <- DocumentTermMatrix(corpus, control = list(dictionary = Terms(dtm)))
dtm_matrix <- as.matrix(dtm)
return(dtm_matrix)
}
# Function to convert numeric prediction to label
get_label <- function(prediction) {
ifelse(prediction == "spam", "spam", "ham")
}
# Test the model on custom message
custom_message <- c("Reminder: Your appointment with Dr. Smith is scheduled for tomorrow at 10:00 AM.")
custom_dtm <- preprocess_message(custom_message)
# Define the SVM model
svm_model <- svm_model
# Predict the category for custom message
prediction <- predict(svm_model, newdata = custom_dtm)
# Convert prediction to label
predicted_label <- get_label(prediction)
# Output the prediction
print(paste("Predicted category for custom message:", predicted_label))
#Accuracy
svm_accuracy <- svm_model$results$Accuracy
print(paste("SVM Model Accuracy:", svm_accuracy))
svm_grid <- expand.grid(C = seq(0.1, 1, by = 0.1),
kernel = c("linear", "radial", "sigmoid"),
gamma = c(0.1, 0.01, 0.001))
plot(svm_grid)
# Plotting
resample_results <- svm_model$resample
plot_data <- data.frame(
Fold = factor(resample_results$Resample, levels = unique(resample_results$Resample)),
Accuracy = resample_results$Accuracy,
Kappa = resample_results$Kappa
)
ggplot(plot_data, aes(x = Fold)) +
geom_point(aes(y = Accuracy, color = "Accuracy"), size = 3) +
geom_line(aes(y = Accuracy, color = "Accuracy", group = 1), size = 1) +
scale_color_manual(values = c("Accuracy" = "blue")) +
labs(title = "Performance across Folds",
x = "Fold",
y = "Value") +
theme_minimal()
# Plotting
resample_results <- svm_model$resample
plot_data <- data.frame(
Fold = factor(resample_results$Resample, levels = unique(resample_results$Resample)),
Accuracy = resample_results$Accuracy,
Kappa = resample_results$Kappa
)
ggplot(plot_data, aes(x = Fold)) +
geom_point(aes(y = Accuracy, color = "Accuracy"), size = 3) +
geom_line(aes(y = Accuracy, color = "Accuracy", group = 1), size = 1) +
scale_color_manual(values = c("Accuracy" = "blue")) +
labs(title = "Performance across Folds",
x = "Fold",
y = "Value") +
theme_minimal()
# Plotting
resample_results <- svm_model$resample
plot_data <- data.frame(
Fold = factor(resample_results$Resample, levels = unique(resample_results$Resample)),
Accuracy = resample_results$Accuracy,
Kappa = resample_results$Kappa
)
ggplot(plot_data, aes(x = Fold)) +
geom_point(aes(y = Accuracy, color = "Accuracy"), size = 3) +
geom_line(aes(y = Accuracy, color = "Accuracy", group = 1), size = 1) +
scale_color_manual(values = c("Accuracy" = "blue")) +
labs(title = "Performance across Folds",
x = "Fold",
y = "Value") +
theme_minimal()
pie(table(data$Category),
labels = c("Ham", "Spam"),
col = c("skyblue", "salmon"),
main = "Distribution of Ham and Spam Messages")
ggplot(plot_data, aes(x = Fold)) +
geom_point(aes(y = Accuracy, color = "Accuracy"), size = 3) +
geom_line(aes(y = Accuracy, color = "Accuracy", group = 1), size = 1) +
scale_color_manual(values = c("Accuracy" = "blue")) +
labs(title = "Performance across Folds",
x = "Fold",
y = "Value") +
theme_minimal()
ggplot(plot_data, aes(x = Fold)) +
geom_point(aes(y = Accuracy, color = "Accuracy"), size = 3) +
geom_line(aes(y = Accuracy, color = "Accuracy", group = 1), size = 1) +
scale_color_manual(values = c("Accuracy" = "blue")) +
labs(title = "Performance across Folds",
x = "Fold",
y = "Value") +
theme_minimal()
# Plotting
resample_results <- svm_model$resample
plot_data <- data.frame(
Fold = factor(resample_results$Resample, levels = unique(resample_results$Resample)),
Accuracy = resample_results$Accuracy,
Kappa = resample_results$Kappa
)
ggplot(plot_data, aes(x = Fold)) +
geom_point(aes(y = Accuracy, color = "Accuracy"), size = 3) +
geom_line(aes(y = Accuracy, color = "Accuracy", group = 1), size = 1) +
scale_color_manual(values = c("Accuracy" = "blue")) +
labs(title = "Performance across Folds",
x = "Fold",
y = "Value") +
theme_minimal()
# Plotting
resample_results <- svm_model$resample
plot_data <- data.frame(
Fold = factor(resample_results$Resample, levels = unique(resample_results$Resample)),
Accuracy = resample_results$Accuracy,
Kappa = resample_results$Kappa
)
ggplot(plot_data, aes(x = Fold)) +
geom_point(aes(y = Accuracy, color = "Accuracy"), size = 3) +
geom_line(aes(y = Accuracy, color = "Accuracy", group = 1), size = 1) +
scale_color_manual(values = c("Accuracy" = "blue")) +
labs(title = "Performance across Folds",
x = "Fold",
y = "Value") +
theme_minimal()
# Plotting
resample_results <- svm_model$resample
plot_data <- data.frame(
Fold = factor(resample_results$Resample, levels = unique(resample_results$Resample)),
Accuracy = resample_results$Accuracy,
Kappa = resample_results$Kappa
)
ggplot2(plot_data, aes(x = Fold)) +
geom_point(aes(y = Accuracy, color = "Accuracy"), size = 3) +
geom_line(aes(y = Accuracy, color = "Accuracy", group = 1), size = 1) +
scale_color_manual(values = c("Accuracy" = "blue")) +
labs(title = "Performance across Folds",
x = "Fold",
y = "Value") +
theme_minimal()
str(test_data)
str(svm_model)
# Plotting
resample_results <- svm_model$resample
plot_data <- data.frame(
Fold = factor(resample_results$Resample, levels = unique(resample_results$Resample)),
Accuracy = resample_results$Accuracy,
Kappa = resample_results$Kappa
)
ggplot2(plot_data, aes(x = Fold)) +
geom_point(aes(y = Accuracy, color = "Accuracy"), size = 3) +
geom_line(aes(y = Accuracy, color = "Accuracy", group = 1), size = 1) +
scale_color_manual(values = c("Accuracy" = "blue")) +
labs(title = "Performance across Folds",
x = "Fold",
y = "Value") +
theme_minimal()
